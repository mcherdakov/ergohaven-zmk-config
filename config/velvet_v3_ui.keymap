#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&trans>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        lg_tog: lg_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 1>;
            label = "LG_TOG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp RA(T)       &kp Q  &kp W      &kp E         &kp R  &kp T                           &kp Y  &kp U           &kp I     &kp O      &kp P  &none
&kp LEFT_SHIFT  &kp A  &kp S      &kp D         &kp F  &kp G                           &kp H  &kp J           &kp K     &kp L      &none  &kp RIGHT_SHIFT
&kp TAB         &kp Z  &kp X      &kp C         &kp V  &kp B                           &kp N  &kp M           &none     &none      &none  &none
                       &kp LCTRL  &kp LEFT_ALT  &mo 5  &mo 2  &kp SPACE    &kp ESCAPE  &mo 3  &cap_sen 4 MB1  &kp LALT  &kp LCTRL
            >;

            label = "Base";
        };

        ru {
            label = "ru";
            bindings = <
&kp RA(T)       &kp Q  &kp W      &kp E         &kp R  &kp T                           &kp Y  &kp U           &kp I          &kp O             &kp P            &kp LEFT_BRACE
&kp LEFT_SHIFT  &kp A  &kp S      &kp D         &kp F  &kp G                           &kp H  &kp J           &kp K          &kp L             &kp COLON        &kp RIGHT_SHIFT
&kp TAB         &kp Z  &kp X      &kp C         &kp V  &kp B                           &kp N  &kp M           &kp LESS_THAN  &kp GREATER_THAN  &kp RIGHT_BRACE  &kp DOUBLE_QUOTES
                       &kp LCTRL  &kp LEFT_ALT  &mo 5  &mo 2  &kp SPACE    &kp ESCAPE  &mo 3  &cap_sen 4 MB1  &kp LALT       &kp LCTRL
            >;
        };

        Navigation {
            bindings = <
&kp N5         &kp LS(MINUS)  &kp RA(RS(LEFT_BRACKET))  &kp KP_ASTERISK  &kp RA(RS(RIGHT_BRACKET))  &kp RA(SINGLE_QUOTE)                       &kp RA(GRAVE)  &kp RA(COMMA)  &kp KP_EQUAL  &kp RA(DOT)   &kp LS(BACKSLASH)  &kp DELETE
&kp RA(SLASH)  &kp KP_MINUS   &kp NUMBER_9              &kp BSLH         &kp NUMBER_0               &kp RA(BACKSLASH)                          &kp NUMBER_1   &kp DOT        &kp COMMA     &kp NUMBER_7  &kp LS(COMMA)      &kp NUMBER_2
&kp NUMBER_6   &kp NUMBER_4   &kp RA(LEFT_BRACKET)      &kp PLUS         &kp RA(RIGHT_BRACKET)      &trans                                     &kp NUMBER_3   &kp BACKSPACE  &trans        &trans        &trans             &trans
                              &trans                    &trans           &trans                     &trans                &trans    &kp ENTER  &mo 4          &trans         &trans        &trans
            >;

            label = "Navigation";
        };

        Symbols {
            bindings = <
&trans  &trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &trans                              &trans          &kp LS(GRAVE)  &trans           &kp GRAVE  &trans     &trans
&trans  &trans  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LS(NUMBER_0)                    &kp LEFT_ARROW  &kp DOWN       &kp UP           &kp RIGHT  &kp LA(L)  &trans
&trans  &trans  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp LS(DOT)                         &trans          &lg_tog        &kp PRINTSCREEN  &trans     &trans     &trans
                &trans            &trans            &trans            &mo 4             &trans    &trans  &trans          &trans         &trans           &trans
            >;

            label = "Symbols";
        };

        Adjust {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            label = "Adjust";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &mo 6   &mkp MB2  &mkp MB3  &mkp MB1  &mo 7                     &mo 7   &mkp MB1  &mkp MB3  &mkp MB2  &mo 6   &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        User1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User1";
        };

        User2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User2";
        };

        User3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            label = "User3";
        };
    };
};

&trackball { cpi = <1000>; };

&trackball_listener {
    input-processors = <&zip_auto_mouse 4 500>, <&zip_xy_scaler 20 20>;

    scroller {
        layers = <5>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <6>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
